@use './breakpoints' as *;
@use '../abstracts/functions' as *;
@use 'sass:map';
@use 'sass:string';
@use 'sass:meta';
@use 'sass:list';

@mixin make-display($name, $properties) {
    .#{$name} {
        @each $key, $value in $properties {
            // @debug "Key: #{$key}, Value: #{$value}";
            #{$key}: #{$value} !important; // Tạo thuộc tính CSS
        }
    }
}

@mixin render-display($displays, $display-config, $display-breakpoints){
    $name: map.get($displays,map.get($display-config, 'name')); //tên của class
    $values-of-container: map.get($displays, map.get($display-config, "value")); //giá trị đi kèm khi khởi tạo, có thể là chuỗi, list hoặc map
    @if meta.type-of($values-of-container) == "string"{
        $values-of-container: list.append((), $values-of-container); //nếu là chuỗi thì chuyển thành list
    }
    @if meta.type-of($values-of-container) == "list"{
        @include make-display($name,get-display-properties($display-values:$values-of-container));//nếu là líst thì render ra luôn
    }
    @else{
        @each $breakpoint, $values in $display-breakpoints {
            $infix: breakpoint-infix($breakpoint, $display-breakpoints); //nếu là map thì dựa vào breakpoints để render ra
            @if $infix != "" {
                $infix: string.slice($infix,2);
            }
            @each $modifier, $display in $values-of-container{
                @include media-breakpoint-up($breakpoint, $display-breakpoints){
                    // @debug #{'map get la ' +map.get($display, $infix)};
                    $display-values: if($infix == "", map.get($display, "xs"), map.get($display, $infix));
                    @include make-display(#{$name + "-" + if($modifier != null, $modifier, "")}, get-display-properties($display-values: $display-values));
                }
            }
        }
    }
}