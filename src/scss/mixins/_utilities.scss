@use '../abstracts/variables' as *;
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';
// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix: "", $is-rfs-media-query: false) {
    $values: map.get($utility, values);
  
    // If the values are a list or string, convert it into a map
    @if meta.type-of($values) == "string" or meta.type-of(list.nth($values, 1)) != "list" {
      $values: list.zip($values, $values);
    } //Kiểm tra nếu values là string hoặc danh sách chứa string(không phải là list) thì sẽ chuyển nó thành map
    //VD: values: wrap nowrap -> values: (wrap: wrap, nowrap: nowrap).
  
    @each $key, $value in $values {
      $properties: map.get($utility, property);
  
      // Multiple properties are possible, for example with vertical or horizontal margins or paddings
      @if meta.type-of($properties) == "string" {
        $properties: list.append((), $properties); // kiểm tra nếu property không phải list thì chuyển về list
      }
  
      // Use custom class if present
      $property-class: if(map.has-key($utility, class), map.get($utility, class), list.nth($properties, 1)); //kiểm tra xem utility này có key 'class' không, nếu có thì gán, nếu không thì lấy phần tử đầu tiên của properties
      $property-class: if($property-class == null, "", $property-class); //chuyển biến này thành chuỗi rỗng nếu null và giữ nguyên nếu khác null
  
      // Use custom CSS variable name if present, otherwise default to `class`
      $css-variable-name: if(map.has-key($utility, css-variable-name), map.get($utility, css-variable-name), map.get($utility, class));
  
      // State params to generate pseudo-classes
  
      $infix: if($property-class == "" and string.slice($infix, 1, 1) == "-", string.slice($infix, 2), $infix);
  
      // Don't prefix if value key is null (e.g. with shadow class)
      $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");
      $is-css-var: map.get($utility, css-var);
      $is-local-vars: map.get($utility, local-vars);
  
      @if $value != null {
        @if $is-css-var {
          .#{$property-class + $infix + $property-class-modifier} {
            --#{$css-variable-name}: #{$value};
          }
        } @else {
          .#{$property-class + $infix + $property-class-modifier} {
            @each $property in $properties {
              @if $is-local-vars {
                @each $local-var, $variable in $is-local-vars {
                  --#{$local-var}: #{$variable};
                }
              }
              #{$property}: $value if($enable-important-utilities, !important, null);
            }
          }
        }
      }
    }
  }
  